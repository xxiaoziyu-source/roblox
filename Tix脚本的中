-- 修正后的 TXR脚本验证核心逻辑
-- 修复了语法错误和逻辑问题，保持原有功能

-----------------------------------------------------------
-- TXR脚本验证核心逻辑（LocalScript，适配多注入器）
-- 验证标记：注入器持久化目录下的"同意TXR脚本"文件夹
-----------------------------------------------------------
-- ================ 基础服务与变量 ================
local Players = game:GetService("Players")
local LocalPlayer = Players.LocalPlayer or Players.PlayerAdded:Wait()
local PlayerGui = LocalPlayer:WaitForChild("PlayerGui")
local RunService = game:GetService("RunService")
local Color3 = Color3
local UDim2 = UDim2
local Instance = Instance
local task = task
local Enum = Enum

-- 注入器文件操作兼容（核心：获取持久化路径）
local readFunc, writeFunc, getPathFunc
pcall(function()
    -- 适配忍者/Delta/Synapse等注入器
    if type(syn) == "table" then
        readFunc = syn.readfile or readfile
        writeFunc = syn.writefile or writefile
        getPathFunc = syn.datapath  -- 忍者注入器获取沙盒路径
    else
        -- 其他注入器兼容
        readFunc = readfile or readFile
        writeFunc = writefile or writeFile
        -- 尝试获取默认路径（如Krnl等）
        getPathFunc = function() return "Roblox/Scripts" end
    end
end)

-- ================ 验证文件夹核心逻辑 ================
-- 获取持久化文件夹路径（跨注入器兼容）
local function getVerifyFolderPath()
    local basePath
    if getPathFunc then
        -- 优先使用注入器提供的沙盒路径（如忍者的syn.datapath()）
        basePath = getPathFunc()
    else
        -- fallback路径（适配多数PC注入器）
        basePath = "C:/RobloxScripts"  -- 可根据系统自动调整
        pcall(function()
            -- 尝试检测系统类型（Windows/macOS）
            if game:GetService("RunService"):IsStudio() then
                basePath = "Roblox/Scripts"  -- Studio环境
            elseif string.find(game:GetService("MarketplaceService"):GetProductInfo(1).Name or "", "Mac") then
                basePath = "~/Library/Roblox/Scripts"  -- macOS路径
            end
        end)
    end
    -- 拼接完整文件夹路径
    return basePath .. "/同意TXR脚本"
end

-- 检查文件夹是否存在（跨注入器兼容）
local function folderExists()
    if not readFunc then return false end  -- 无文件操作能力则强制验证
    local folderPath = getVerifyFolderPath()
    -- 尝试读取文件夹（注入器通常通过检查路径是否可访问判断存在性）
    local success = pcall(function()
        -- 不同注入器判断方式可能不同，这里用"尝试读取"作为存在性检测
        readFunc(folderPath .. "/.verify")  -- 读取文件夹内的标记文件
    end)
    return success
end

-- 创建验证文件夹（跨注入器兼容）
local function createTargetFolder()
    if not writeFunc then return end  -- 无写入能力则跳过（不影响使用，仅下次仍需验证）
    local folderPath = getVerifyFolderPath()
    local success = pcall(function()
        -- 1. 创建文件夹（注入器通常支持通过写入空文件创建文件夹）
        writeFunc(folderPath .. "/.verify", "")  -- 写入空标记文件，自动创建父文件夹
        print("验证文件夹创建成功：" .. folderPath)
    end)
    if not success then
        -- 降级方案：若无法创建文件夹，临时用PlayerGui文件夹（仅当前会话有效）
        local tempFolder = Instance.new("Folder")
        tempFolder.Name = "同意秋容脚本"
        tempFolder.Parent = PlayerGui
        print("警告：持久化文件夹创建失败，使用临时文件夹（仅当前会话有效）")
    end
end

-- ================ 通用UI工具函数 ================
-- 创建屏幕GUI
local function createScreenGui(name)
    local gui = Instance.new("ScreenGui")
    gui.Name = name
    gui.IgnoreGuiInset = true
    gui.Parent = PlayerGui
    return gui
end

-- 创建带圆角的框架
local function createFrame(parent, size, position)
    local frame = Instance.new("Frame")
    frame.Size = size
    frame.Position = position
    frame.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    frame.BackgroundTransparency = 0.3
    frame.BorderSizePixel = 1
    frame.BorderColor3 = Color3.fromRGB(180, 160, 255)
    frame.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 12)
    corner.Parent = frame
    
    return frame
end

-- 创建基础标签
local function createBasicLabel(parent, text, size, position)
    local label = Instance.new("TextLabel")
    label.Text = text
    label.Size = size
    label.Position = position
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextSize = 16
    label.BackgroundTransparency = 1
    label.Parent = parent
    return label
end

-- 创建普通标签
local function createLabel(parent, text, size, position)
    local label = Instance.new("TextLabel")
    label.Text = text
    label.Size = size
    label.Position = position
    label.TextColor3 = Color3.new(1, 1, 1)
    label.TextSize = 16
    label.BackgroundTransparency = 1
    label.Parent = parent
    return label
end

-- 创建按钮
local function createButton(parent, text, size, position, callback)
    local btn = Instance.new("TextButton")
    btn.Text = text
    btn.Size = size
    btn.Position = position
    btn.BackgroundColor3 = Color3.fromRGB(60, 60, 100)
    btn.TextColor3 = Color3.new(1, 1, 1)
    btn.TextSize = 14
    btn.Parent = parent
    
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, 6)
    corner.Parent = btn
    
    if callback then
        btn.MouseButton1Click:Connect(callback)
    end
    return btn
end

-- 创建点击输入框
local function createClickToInput(parent, size, position, triggerText, placeholderText)
    local trigger = Instance.new("TextButton")
    trigger.Size = size
    trigger.Position = position
    trigger.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    trigger.BackgroundTransparency = 0.7
    trigger.Text = triggerText
    trigger.TextColor3 = Color3.new(1, 1, 1)
    trigger.TextSize = 14
    trigger.Parent = parent
    
    local cornerTrigger = Instance.new("UICorner")
    cornerTrigger.CornerRadius = UDim.new(0, 6)
    cornerTrigger.Parent = trigger
    
    local box = Instance.new("TextBox")
    box.Size = size
    box.Position = position
    box.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    box.BackgroundTransparency = 0.7
    box.TextColor3 = Color3.new(1, 1, 1)
    box.TextSize = 14
    box.PlaceholderText = placeholderText
    box.Visible = false
    box.Parent = parent
    
    local cornerBox = Instance.new("UICorner")
    cornerBox.CornerRadius = UDim.new(0, 6)
    cornerBox.Parent = box
    
    trigger.MouseButton1Click:Connect(function()
        trigger.Visible = false
        box.Visible = true
        box:CaptureFocus()
    end)
    
    return trigger, box
end

-- 播放临时音效
local function playTempSound(soundId)
    local fullSoundId = "rbxassetid://" .. tostring(soundId)
    local sound = Instance.new("Sound")
    sound.SoundId = fullSoundId
    sound.Volume = 1.0
    sound.Parent = workspace
    pcall(function()
        sound:Play()
        sound.Ended:Connect(function() sound:Destroy() end)
        task.delay(5, function() if sound.Parent then sound:Destroy() end end)
    end)
end

-- ================ 验证弹窗逻辑 ================
-- 快手号验证
local function Popup_VerifyKuaishou()
    local gui = createScreenGui("Popup_Kuaishou")
    local frame = createFrame(gui, UDim2.new(0, 420, 0, 240), UDim2.new(0.5, -210, 0.5, -120))
    createLabel(frame, "请输入你的卡密", UDim2.new(1, 0, 0, 35), UDim2.new(0, 0, 0, 25))
    
    local _, inputKuaishou = createClickToInput(
        frame, UDim2.new(1, -50, 0, 45), UDim2.new(0, 25, 0, 75),
        "点击输入卡密", "请输入正确的卡密"
    )
    
    local statusLabel = createLabel(frame, "", UDim2.new(1, 0, 0, 25), UDim2.new(0, 0, 0, 135))
    local done = false
    
    createButton(frame, "验证你的卡密", UDim2.new(0.45, 0, 0, 35), UDim2.new(0.1, 0, 0, 175), function()
        if inputKuaishou.Text == "TXR" then
            done = true
            gui:Destroy()
        else
            statusLabel.Text = "卡密错误"
            statusLabel.TextColor3 = Color3.fromRGB(255, 60, 60)
        end
    end)
    
    createButton(frame, "退出脚本", UDim2.new(0.45, 0, 0, 35), UDim2.new(0.5, 0, 0, 175), function()
        gui:Destroy()
        error("用户主动退出，脚本停止运行")
    end)
    
    while not done do task.wait() end
end

-- QQ群验证
local function Popup_VerifyQQGroup()
    local gui = createScreenGui("Popup_QQGroup")
    local frame = createFrame(gui, UDim2.new(0, 420, 0, 260), UDim2.new(0.5, -210, 0.5, -130))
    createLabel(frame, "主播现在还有没有QQ群？", UDim2.new(1, 0, 0, 35), UDim2.new(0, 0, 0, 25))
    
    local _, inputQQGroup = createClickToInput(
        frame, UDim2.new(1, -50, 0, 45), UDim2.new(0, 25, 0, 75),
        "点击输入答案", "请输入有或者没有"
    )
    
    local statusLabel = createLabel(frame, "", UDim2.new(1, 0, 0, 25), UDim2.new(0, 0, 0, 135))
    local exitCount = 0
    local done = false
    
    createButton(frame, "有QQ", UDim2.new(0.45, 0, 0, 35), UDim2.new(0.1, 0, 0, 185), function()
        statusLabel.Text = "你是废物吗？这都答不上来"
        statusLabel.TextColor3 = Color3.fromRGB(255, 60, 60)
    end)
    
    createButton(frame, "现免版脚本", UDim2.new(0.45, 0, 0, 35), UDim2.new(0.5, 0, 0, 185), function()
        exitCount = exitCount + 1
        if exitCount == 1 then
            statusLabel.Text = "加载中"
            statusLabel.TextColor3 = Color3.fromRGB(255, 220, 60)
        elseif exitCount >= 2 then
            done = true
            gui:Destroy()
        end
    end)
    
    while not done do task.wait() end
    
    -- 最终提示
    local notifyGui = createScreenGui("Popup_FinalNotice")
    local notifyFrame = createFrame(notifyGui, UDim2.new(0, 340, 0, 120), UDim2.new(0.5, -170, 0.5, -60))
    createLabel(notifyFrame, "请购买卡密", UDim2.new(1, 0, 0, 35), UDim2.new(0, 0, 0, 45))
    playTempSound("12222253")
    task.wait(3)
    notifyGui:Destroy()
end

-- ================ 公告弹窗（添加滚动功能） ================
local function showAnnouncement()
    local noticeGui = createScreenGui("Popup_Announcement")
    local noticeFrame = createFrame(noticeGui, UDim2.new(0, 400, 0, 300), UDim2.new(0.5, -200, 0.5, -150))
    
    -- 标题（缩小50%：原22 → 11）
    local titleLabel = createBasicLabel(noticeFrame, "3.1汉化版 脚本公告", UDim2.new(1, 0, 0, 40), UDim2.new(0, 0, 0, 15))
    titleLabel.TextSize = 22 * 0.5  -- 仅公告标题缩小
    titleLabel.TextColor3 = Color3.fromRGB(255, 210, 0)
    titleLabel.TextXAlignment = Enum.TextXAlignment.Center
    
    -- 创建滚动框架
    local scrollFrame = Instance.new("ScrollingFrame")
    scrollFrame.Name = "AnnouncementScroll"
    scrollFrame.Size = UDim2.new(1, -20, 0, 180)
    scrollFrame.Position = UDim2.new(0, 10, 0, 60)
    scrollFrame.BackgroundTransparency = 1
    scrollFrame.ScrollBarThickness = 8
    scrollFrame.ScrollingDirection = Enum.ScrollingDirection.Y
    scrollFrame.Parent = noticeFrame
    
    -- 内容标签（放在滚动框架内）
    local contentLabel = createLabel(scrollFrame, "更新日志:\n8月21日05:35更新军事大亨去除GB失效脚本全自动农场脚本挂机即可\n8月21日10:07更新墨水游戏新版老外Xa包括使用教程获取方法和注意事项\n8月21日00:58更新WARMIX[PVP FPS 武器战斗射击枪]-保护房屋免受怪物侵害-保护总统\n8月22日18:17添加了chain服务器脚本\n9月12日更新墨水游戏汉化脚目前作者已学会汉化逐渐汉化中\n9月13日10:00更新新的墨水游戏汉化去除墨水游戏过期脚本去除ink-game正常版添加ink-game测试版汉化\n9月13日16:12全面取消汉化更新新的方法等待半天新更新了Xa链接修复过期\n9月13日23:08更新一键汉化脚本打开脚本点击按钮将进行汉化目前只支持墨水游戏ax或ink-game和RINGTA一键汉化脚本在墨水游戏菜单(禁止拿去圈💰尤其是知道源码地址的人)\n9月14日12:23添加了最强战场汉化还是在一键汉化脚本里面，还是在墨水菜单", 
        UDim2.new(1, -10, 0, 0), UDim2.new(0, 5, 0, 5))
    contentLabel.TextSize = 16 * 0.5  -- 仅公告内容缩小
    contentLabel.TextWrapped = true
    contentLabel.TextXAlignment = Enum.TextXAlignment.Left
    contentLabel.AutomaticSize = Enum.AutomaticSize.Y
    
    -- 设置滚动框架的CanvasSize
    contentLabel:GetPropertyChangedSignal("TextBounds"):Connect(function()
        scrollFrame.CanvasSize = UDim2.new(0, 0, 0, contentLabel.TextBounds.Y + 10)
    end)
    
    -- 关闭按钮
    local noticeDone = false
    createButton(noticeFrame, "我知道了", UDim2.new(0.5, 0, 0, 40), UDim2.new(0.25, 0, 1, -50), function()
        noticeDone = true
        noticeGui:Destroy()
    end)
    
    while not noticeDone do task.wait() end
end

-- ================ 执行流程 ================
local isFirstUse = not folderExists()  -- 检测持久化文件夹是否存在
if isFirstUse then
    -- 首次使用：执行验证 → 创建持久化文件夹 → 显示公告
    Popup_VerifyKuaishou()
    Popup_VerifyQQGroup()
    createTargetFolder()  -- 验证通过后创建文件夹（跨会话保留）
    showAnnouncement()
else
    -- 非首次使用：直接显示公告（跳过验证）
    print("检测到验证文件夹，跳过验证")
    showAnnouncement()
end

-- ================ 主UI系统（修复版） ================
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local StarterGui = game:GetService("StarterGui")
local SoundService = game:GetService("SoundService")
local HttpService = game:GetService("HttpService")

-- ====================== 配置与状态管理 ======================
local CONFIG = {
    TWEEN_DURATION = 0.25,
    UPDATE_INTERVAL = 0.5,
    UI_SCALE = { default = 0.8 },
    UI_COLORS = {
        primary = Color3.fromRGB(60, 60, 100),
        secondary = Color3.fromRGB(50, 50, 70),
        accent = Color3.fromRGB(255, 230, 100),
        success = Color3.fromRGB(60, 100, 80),
        danger = Color3.fromRGB(150, 50, 50),
        localPlayer = Color3.fromRGB(100, 200, 255)
    },
    NOTIFICATION = {
        DURATION = 3,
        SOUND_ID = "79348298352567",
        CORNER_RADIUS = 12
    }
}

local UI_STATE = {
    scale = CONFIG.UI_SCALE.default,
    activeMenu = "保存位置",
    menuPanels = {},
    isRunning = true,
    isScaling = false,
    mainPanel = nil,
    floatBtn = nil,
    topBar = nil,
    isDragging = false,
    isScrolling = false,
    dragStart = Vector2.new(0, 0),
    panelStartPos = UDim2.new(0, 0, 0, 0),
    scrollStartPositions = {},
    savedCoordinates = {},
    csvFilePath = "",
    coordinateLoop = nil,
    playerPositionLoop = nil,
    playerSortMode = "name",
    isToggleFeatureEnabled = false,
    wallhackConnection = nil,
    characterAddedConn = nil,
    characterRemovingConn = nil
}

-- ====================== 工具函数 ======================
-- 创建圆角
local function createCorner(parent, radius)
    if not parent or not parent:IsDescendantOf(game) then return end
    local corner = Instance.new("UICorner")
    corner.CornerRadius = UDim.new(0, radius * UI_STATE.scale)
    corner.Parent = parent
end

-- 创建文本标签
local function createUILabel(parent, props)
    if not parent or not parent:IsDescendantOf(game) then return nil end
    local label = Instance.new("TextLabel")
    label.Name = props.name or "Label"
    label.Size = props.size or UDim2.new(1, 0, 1, 0)
    label.Position = props.position or UDim2.new(0, 0, 0, 0)
    label.Text = props.text or ""
    label.TextColor3 = props.color or Color3.new(1, 1, 1)
    label.TextSize = (props.textSize or 14) * UI_STATE.scale
    label.TextXAlignment = props.xAlign or Enum.TextXAlignment.Left
    label.BackgroundTransparency = props.bgTransparency or 1
    label.BackgroundColor3 = props.bgColor or Color3.new(0, 0, 0)
    label.Font = props.font or Enum.Font.SourceSans
    label.Parent = parent
    label.Active = props.active or false
    
    if props.anchor then
        label.AnchorPoint = props.anchor
    end
    if props.textWrapped then
        label.TextWrapped = true
    end
    
    return label
end

-- 创建按钮
local function createUIButton(parent, props)
    if not parent or not parent:IsDescendantOf(game) then return nil end
    local btn = Instance.new("TextButton")
    btn.Name = props.name or "Button"
    btn.Size = props.size or UDim2.new(1, 0, 0, 40 * UI_STATE.scale)
    btn.Position = props.position or UDim2.new(0, 0, 0, 0)
    btn.Text = props.text or "按钮"
    btn.TextColor3 = props.textColor or Color3.new(1, 1, 1)
    btn.TextSize = (props.textSize or 16) * UI_STATE.scale
    btn.BackgroundColor3 = props.bgColor or CONFIG.UI_COLORS.primary
    btn.BackgroundTransparency = props.bgTransparency or 0.8
    btn.Parent = parent
    btn.Active = props.active ~= nil and props.active or true
    btn.Selectable = props.selectable or false
    
    if props.anchor then
        btn.AnchorPoint = props.anchor
    end
    
    createCorner(btn, props.radius or 8)
    
    -- 悬停动画
    if props.hoverColor then
        btn.MouseEnter:Connect(function()
            if not UI_STATE.isDragging and not UI_STATE.isScrolling and btn:IsDescendantOf(game) then
                TweenService:Create(
                    btn,
                    TweenInfo.new(CONFIG.TWEEN_DURATION),
                    {BackgroundColor3 = props.hoverColor}
                ):Play()
            end
        end)
        btn.MouseLeave:Connect(function()
            if not UI_STATE.isDragging and not UI_STATE.isScrolling and btn:IsDescendantOf(game) then
                TweenService:Create(
                    btn,
                    TweenInfo.new(CONFIG.TWEEN_DURATION),
                    {BackgroundColor3 = props.bgColor or CONFIG.UI_COLORS.primary}
                ):Play()
            end
        end)
    end
    
    -- 点击事件
    if props.onClick then
        btn.MouseButton1Click:Connect(function()
            task.defer(function()
                if not UI_STATE.isDragging and not UI_STATE.isScrolling and btn:IsDescendantOf(game) then
                    props.onClick()
                end
            end)
        end)
    end
    
    return btn
end

-- 显示通知
local function showNotification(title, text, duration)
    local localPlayer = Players.LocalPlayer
    if not localPlayer then return end
    local playerGui = localPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    -- 简单通知实现
    local notificationGui = Instance.new("ScreenGui")
    notificationGui.Name = "CustomNotification"
    notificationGui.Parent = playerGui
    
    local notificationFrame = Instance.new("Frame")
    notificationFrame.Size = UDim2.new(0, 200, 0, 80)
    notificationFrame.Position = UDim2.new(1, -210, 1, -90)
    notificationFrame.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    notificationFrame.BackgroundTransparency = 0.2
    notificationFrame.Parent = notificationGui
    
    createCorner(notificationFrame, 8)
    
    local titleLabel = createUILabel(notificationFrame, {
        text = title or "提示",
        size = UDim2.new(1, -10, 0, 25),
        position = UDim2.new(0, 5, 0, 5),
        color = Color3.fromRGB(255, 230, 100),
        textSize = 14,
        xAlign = Enum.TextXAlignment.Center
    })
    
    local contentLabel = createUILabel(notificationFrame, {
        text = text or "",
        size = UDim2.new(1, -10, 0, 40),
        position = UDim2.new(0, 5, 0, 30),
        color = Color3.new(1, 1, 1),
        textSize = 12,
        textWrapped = true,
        xAlign = Enum.TextXAlignment.Center
    })
    
    -- 自动销毁
    task.delay(duration or CONFIG.NOTIFICATION.DURATION, function()
        if notificationGui and notificationGui.Parent then
            notificationGui:Destroy()
        end
    end)
end

-- 拖动绑定函数
local function bindDragToElement(element, target)
    if not element or not target then return end
    element.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or 
           input.UserInputType == Enum.UserInputType.Touch then
            UI_STATE.isDragging = true
            UI_STATE.dragStart = input.Position
            UI_STATE.panelStartPos = target.Position
        end
    end)
end

-- UI清理函数
local function cleanupOldUI()
    local localPlayer = Players.LocalPlayer
    if not localPlayer then return end
    local playerGui = localPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    -- 清理主UI
    if UI_STATE.mainPanel and UI_STATE.mainPanel:IsDescendantOf(game) then
        UI_STATE.mainPanel:Destroy()
    end
    
    -- 清理悬浮窗
    if UI_STATE.floatBtn and UI_STATE.floatBtn:IsDescendantOf(game) then
        UI_STATE.floatBtn:Destroy()
    end
    
    -- 清理通知和对话框
    for _, gui in ipairs(playerGui:GetChildren()) do
        if gui.Name:match("CustomNotification") or gui.Name == "ExecutionDialog" then
            gui:Destroy()
        end
    end
    
    -- 断开循环
        -- 断开循环
    if UI_STATE.coordinateLoop then
        UI_STATE.coordinateLoop:Disconnect()
        UI_STATE.coordinateLoop = nil
    end
    if UI_STATE.playerPositionLoop then
        UI_STATE.playerPositionLoop:Disconnect()
        UI_STATE.playerPositionLoop = nil
    end
    
    -- 断开角色监听连接
    if UI_STATE.characterAddedConn then
        UI_STATE.characterAddedConn:Disconnect()
        UI_STATE.characterAddedConn = nil
    end
    if UI_STATE.characterRemovingConn then
        UI_STATE.characterRemovingConn:Disconnect()
        UI_STATE.characterRemovingConn = nil
    end
    
    -- 断开穿墙功能连接
    if UI_STATE.wallhackConnection then
        UI_STATE.wallhackConnection:Disconnect()
        UI_STATE.wallhackConnection = nil
    end
end

-- 角色销毁时的清理函数
local function onCharacterRemoving()
    -- 断开坐标更新循环
    if UI_STATE.coordinateLoop then
        UI_STATE.coordinateLoop:Disconnect()
        UI_STATE.coordinateLoop = nil
    end
    -- 断开玩家位置更新循环
    if UI_STATE.playerPositionLoop then
        UI_STATE.playerPositionLoop:Disconnect()
        UI_STATE.playerPositionLoop = nil
    end
    -- 断开穿墙功能连接
    if UI_STATE.wallhackConnection then
        UI_STATE.wallhackConnection:Disconnect()
        UI_STATE.wallhackConnection = nil
    end
    showNotification("角色已销毁", "脚本已暂停，等待角色重生...")
end

-- 角色重生时的初始化函数
local function onCharacterAdded(character)
    -- 等待角色加载完成
    local rootPart = character:WaitForChild("HumanoidRootPart", 10)
    local humanoid = character:WaitForChild("Humanoid", 10)
    
    if not rootPart or not humanoid then
        showNotification("角色加载失败", "无法获取角色关键部件")
        return
    end
    
    -- 重新启动坐标更新（如果当前在保存位置菜单）
    if UI_STATE.activeMenu == "保存位置" and UI_STATE.mainPanel and UI_STATE.mainPanel.Visible then
        if UI_STATE.coordinateLoop then
            UI_STATE.coordinateLoop:Disconnect()
        end
        UI_STATE.coordinateLoop = RunService.Heartbeat:Connect(function()
            local root = character:FindFirstChild("HumanoidRootPart")
            if root then
                local pos = root.Position
                local coordLabel = UI_STATE.mainPanel:FindFirstChild("CoordDisplay", true)
                if coordLabel then
                    coordLabel.Text = string.format("实时坐标：X: %.1f, Y: %.1f, Z: %.1f", pos.X, pos.Y, pos.Z)
                end
            end
        end)
    end
    
    -- 监听角色死亡事件
    humanoid.Died:Connect(function()
        onCharacterRemoving()
    end)
    
    showNotification("角色已加载", "脚本功能已恢复")
end

-- ====================== 文件读写 ======================
local function initCSVPath()
    print("初始化CSV路径...")
    local success, result = pcall(function()
        -- 忍者注入器路径适配
        if type(syn) == "table" then
            return syn.datapath and syn.datapath() .. "/Roblox_Current_Coord.csv" 
                or "/sdcard/Delta/Scripts/Roblox_Current_Coord.csv"
        else
            return "Roblox_Current_Coord.csv"
        end
    end)
    UI_STATE.csvFilePath = success and result or "Roblox_Current_Coord.csv"
    print("坐标文件路径：", UI_STATE.csvFilePath)
end

local function readCSVFile()
    print("读取坐标文件：", UI_STATE.csvFilePath)
    if not readFunc then
        warn("当前注入器不支持文件读取，将使用空坐标列表")
        return {}
    end
    local success, content = pcall(readFunc, UI_STATE.csvFilePath)
    if not success or not content or content == "" then
        print("坐标文件读取失败（空列表）：", success and content or "无内容")
        return {}
    end
    local coords = {}
    local lines = content:split("\n")
    for i = 2, #lines do
        local line = lines[i]:gsub("\r", "")
        if line ~= "" then
            local safeLine = line:gsub("\\,", "\0")
            local parts = safeLine:split(",")
            if #parts == 4 then
                local name = parts[1]:gsub("\0", ",")
                local x, y, z = tonumber(parts[2]), tonumber(parts[3]), tonumber(parts[4])
                if x and y and z then
                    x = math.round(x * 100) / 100
                    y = math.round(y * 100) / 100
                    z = math.round(z * 100) / 100
                    table.insert(coords, {name = name, x = x, y = y, z = z})
                end
            end
        end
    end
    print("读取到", #coords, "条坐标")
    return coords
end

local function updateCSVFile()
    if not writeFunc then
        warn("当前注入器不支持文件写入")
        return false
    end
    local csv = "名称,X坐标,Y坐标,Z坐标\n"
    for _, coord in ipairs(UI_STATE.savedCoordinates) do
        local safeName = coord.name:gsub(",", "\\,")
        csv = csv .. string.format("%s,%.2f,%.2f,%.2f\n", safeName, coord.x, coord.y, coord.z)
    end
    local success, err = pcall(writeFunc, UI_STATE.csvFilePath, csv)
    if not success then
        warn("坐标写入失败: " .. tostring(err))
        return false
    end
    print("坐标文件已更新")
    return true
end

-- ====================== 悬浮窗创建 ======================
local function createFloatingButton()
    local localPlayer = Players.LocalPlayer
    if not localPlayer then return end
    local playerGui = localPlayer:FindFirstChild("PlayerGui")
    if not playerGui then return end
    
    if UI_STATE.floatBtn and UI_STATE.floatBtn:IsDescendantOf(game) then
        return
    end
    
    local floatGui = Instance.new("ScreenGui")
    floatGui.Name = "TXR脚本悬浮窗"
    floatGui.IgnoreGuiInset = true
    floatGui.Parent = playerGui
    
    -- 忍者注入器保护GUI
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(floatGui)
        end
    end)
    
    local floatWidth = 60 * UI_STATE.scale
    local floatHeight = 30 * UI_STATE.scale
    UI_STATE.floatBtn = createUIButton(floatGui, {
        name = "FloatingButton",
        size = UDim2.new(0, floatWidth, 0, floatHeight),
        position = UDim2.new(1, -floatWidth - 2, 0.1, 0),
        text = "显示",
        bgColor = CONFIG.UI_COLORS.primary,
        radius = 15 * UI_STATE.scale,
        textSize = 14,
        hoverColor = Color3.fromRGB(70, 70, 120),
        onClick = function()
            if UI_STATE.mainPanel then
                local isVisible = UI_STATE.mainPanel.Visible
                UI_STATE.mainPanel.Visible = not isVisible
                if UI_STATE.floatBtn and UI_STATE.floatBtn:IsDescendantOf(game) then
                    UI_STATE.floatBtn.Text = isVisible and "显示" or "隐藏"
                end
                showNotification("主UI状态", "已" .. (isVisible and "隐藏" or "显示") .. "功能面板")
            else
                createMainUI()
                if UI_STATE.floatBtn and UI_STATE.floatBtn:IsDescendantOf(game) then
                    UI_STATE.floatBtn.Text = "隐藏"
                    showNotification("主UI加载完成", "功能面板已显示")
                end
            end
        end
    })
    
    -- 悬浮窗拖动逻辑
    local btnIsDragging = false
    local btnStartPos = UI_STATE.floatBtn and UI_STATE.floatBtn.Position or UDim2.new()
    
    if UI_STATE.floatBtn then
        UI_STATE.floatBtn.InputBegan:Connect(function(input)
            if input.UserInputType == Enum.UserInputType.MouseButton1 or 
               input.UserInputType == Enum.UserInputType.Touch then
                btnIsDragging = true
                UI_STATE.dragStart = input.Position
                btnStartPos = UI_STATE.floatBtn.Position
            end
        end)
    end
    
    UserInputService.InputChanged:Connect(function(input)
        if btnIsDragging and (input.UserInputType == Enum.UserInputType.MouseMovement or 
           input.UserInputType == Enum.UserInputType.Touch) and UI_STATE.floatBtn and UI_STATE.floatBtn:IsDescendantOf(game) then
            local delta = input.Position - UI_STATE.dragStart
            UI_STATE.floatBtn.Position = UDim2.new(
                btnStartPos.X.Scale, btnStartPos.X.Offset + delta.X,
                btnStartPos.Y.Scale, btnStartPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or 
            input.UserInputType == Enum.UserInputType.Touch) and btnIsDragging then
            btnIsDragging = false
        end
    end)
    
    print("悬浮窗创建成功")
end

-- ====================== 菜单内容创建函数 ======================
local function create1Content(container)
    if not container or not container:IsDescendantOf(game) then return function() end end
    
    local coordDisplay = Instance.new("Frame")
    coordDisplay.Name = "CoordDisplay"
    coordDisplay.Size = UDim2.new(1, 0, 0, 40 * UI_STATE.scale)
    coordDisplay.LayoutOrder = 1
    coordDisplay.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    coordDisplay.BackgroundTransparency = 0.7
    coordDisplay.Parent = container
    createCorner(coordDisplay, 6)
    
    local coordLabel = createUILabel(coordDisplay, {
        size = UDim2.new(1, -10 * UI_STATE.scale, 1, 0),
        position = UDim2.new(0, 10 * UI_STATE.scale, 0, 0),
        text = "实时坐标：X: ---, Y: ---, Z: ---",
        textSize = 14,
        xAlign = Enum.TextXAlignment.Left
    })
    
    local nameInput = Instance.new("TextBox")
    nameInput.Name = "NameInput"
    nameInput.Size = UDim2.new(1, 0, 0, 40 * UI_STATE.scale)
    nameInput.LayoutOrder = 2
    nameInput.PlaceholderText = "输入坐标名称"
    nameInput.Text = ""
    nameInput.TextColor3 = Color3.new(1, 1, 1)
    nameInput.PlaceholderColor3 = Color3.fromRGB(150, 150, 150)
    nameInput.TextSize = 14 * UI_STATE.scale
    nameInput.BackgroundColor3 = Color3.fromRGB(60, 60, 80)
    nameInput.BackgroundTransparency = 0.7
    nameInput.Parent = container
    nameInput.Active = true
    nameInput.Selectable = true
    createCorner(nameInput, 6)
    
    -- 操作提示
    nameInput.FocusLost:Connect(function(enterPressed)
        if enterPressed and nameInput.Text ~= "" then
            showNotification("名称已更新", "坐标名称设置为：" .. nameInput.Text)
        end
    end)
    
    createUIButton(container, {
        name = "SaveBtn",
        layoutOrder = 3,
        text = "保存到文件",
        bgColor = CONFIG.UI_COLORS.success,
        hoverColor = Color3.fromRGB(70, 110, 90),
        onClick = function()
            local player = Players.LocalPlayer
            local rootPart = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
            if not rootPart then
                showNotification("保存失败", "角色未加载")
                return
            end
            
            local name = nameInput.Text ~= "" and nameInput.Text or "未命名坐标"
            local exists = false
            for _, item in ipairs(UI_STATE.savedCoordinates) do
                if item.name == name then exists = true end
            end
            if exists then name = name .. "(" .. #UI_STATE.savedCoordinates + 1 .. ")" end
            
            local pos = rootPart.Position
            local x, y, z = math.round(pos.X*100)/100, math.round(pos.Y*100)/100, math.round(pos.Z*100)/100
            table.insert(UI_STATE.savedCoordinates, {name = name, x = x, y = y, z = z})
            
            local success = updateCSVFile()
            showNotification(
                success and "保存成功" or "保存失败",
                success and ("已保存到：" .. UI_STATE.csvFilePath) or "注入器不支持文件写入"
            )
            nameInput.Text = ""
        end
    })
    
    return function(isVisible)
        if not isVisible then return end
        if UI_STATE.coordinateLoop then UI_STATE.coordinateLoop:Disconnect() end
        
        UI_STATE.coordinateLoop = RunService.Heartbeat:Connect(function()
            if not coordLabel or not coordLabel:IsDescendantOf(game) then
                return
            end
            
            local player = Players.LocalPlayer
            if not player then return end
            
            local character = player.Character
            if not character then
                coordLabel.Text = "实时坐标：角色未生成"
                return
            end
            
            local rootPart = character:FindFirstChild("HumanoidRootPart")
            if rootPart then
                local pos = rootPart.Position
                coordLabel.Text = string.format("实时坐标：X: %.1f, Y: %.1f, Z: %.1f", pos.X, pos.Y, pos.Z)
            else
                coordLabel.Text = "实时坐标：角色加载中..."
            end
        end)
    end
end

-- 其他菜单内容函数（简化版，实际使用时需要完整实现）
local function create2Content(container)
    if not container or not container:IsDescendantOf(game) then return function() end end
    
    createUILabel(container, {
        text = "玩家传送功能",
        size = UDim2.new(1, 0, 0, 40 * UI_STATE.scale),
        layoutOrder = 1,
        textSize = 16,
        xAlign = Enum.TextXAlignment.Center
    })
    
    return function() end
end

local function create3Content(container)
    if not container or not container:IsDescendantOf(game) then return function() end end
    
    createUILabel(container, {
        text = "注入器下载",
        size = UDim2.new(1, 0, 0, 40 * UI_STATE.scale),
        layoutOrder = 1,
        textSize = 16,
        xAlign = Enum.TextXAlignment.Center
    })
    
    return function() end
end

-- ====================== 主UI创建 ======================
local function createMainUI()
    cleanupOldUI()
    UI_STATE.isScaling = true
    
    local localPlayer = Players.LocalPlayer
    if not localPlayer then
        warn("无法获取本地玩家")
        showNotification("UI加载失败", "无法获取本地玩家", 10)
        return
    end
    
    local playerGui = localPlayer:WaitForChild("PlayerGui", 10)
    if not playerGui then
        warn("获取PlayerGui超时")
        showNotification("UI加载失败", "获取PlayerGui超时", 10)
        return
    end
    
    local screenGui = Instance.new("ScreenGui")
    screenGui.Name = "TXR脚本"
    screenGui.IgnoreGuiInset = true
    screenGui.Parent = playerGui
    
    -- 忍者注入器保护GUI
    pcall(function()
        if syn and syn.protect_gui then
            syn.protect_gui(screenGui)
        end
    end)
    
    local mainPanel = Instance.new("Frame")
    mainPanel.Name = "MainPanel"
    mainPanel.Size = UDim2.new(0, 650 * UI_STATE.scale, 0, 380 * UI_STATE.scale)
    mainPanel.Position = UDim2.new(0.5, -325 * UI_STATE.scale, 0.5, -190 * UI_STATE.scale)
    mainPanel.BackgroundColor3 = Color3.fromRGB(40, 40, 60)
    mainPanel.BackgroundTransparency = 0.9
    mainPanel.BorderSizePixel = 1
    mainPanel.BorderColor3 = Color3.fromRGB(180, 160, 255)
    mainPanel.Parent = screenGui
    createCorner(mainPanel, 14)
    
    UI_STATE.mainPanel = mainPanel
    
    -- 创建顶部栏
    local topBar = Instance.new("Frame")
    topBar.Name = "TopBar"
    topBar.Size = UDim2.new(1, -20 * UI_STATE.scale, 0, 80 * UI_STATE.scale)
    topBar.Position = UDim2.new(0, 10 * UI_STATE.scale, 0, 10 * UI_STATE.scale)
    topBar.BackgroundColor3 = Color3.fromRGB(50, 50, 80)
    topBar.BackgroundTransparency = 0.8
    topBar.Parent = mainPanel
    createCorner(topBar, 8)
    
    UI_STATE.topBar = topBar
    
    -- 标题
    createUILabel(topBar, {
        name = "TitleLabel",
        size = UDim2.new(0, 0, 1, 0),
        position = UDim2.new(0.5, 0, 0, 0),
        anchor = Vector2.new(0.5, 0),
        text = "TXR脚本 UI 2.0",
        color = CONFIG.UI_COLORS.accent,
        textSize = 26,
        font = Enum.Font.SourceSansBold,
        xAlign = Enum.TextXAlignment.Center
    })
    
    -- 控制按钮
    local function createControlButton(text, offset, color, callback)
        createUIButton(topBar, {
            name = text == "X" and "CloseBtn" or (text == "+" and "ZoomInBtn" or "ZoomOutBtn"),
            size = UDim2.new(0, 36 * UI_STATE.scale, 0, 36 * UI_STATE.scale),
            position = UDim2.new(1, -45 * UI_STATE.scale - offset, 0.5, 0),
            anchor = Vector2.new(0.5, 0.5),
            text = text,
            textSize = 18,
            bgColor = color,
            radius = 6,
            hoverColor = text == "X" and Color3.fromRGB(230, 80, 80) or 
                        (text == "+" and Color3.fromRGB(80, 140, 80) or Color3.fromRGB(140, 100, 80)),
            onClick = callback
        })
    end
    
    -- 缩小按钮
    createControlButton("-", 90 * UI_STATE.scale, Color3.fromRGB(120, 80, 60), function()
        if UI_STATE.isScaling then return end
        UI_STATE.isScaling = true
        
        local currentActiveMenu = UI_STATE.activeMenu
        if UI_STATE.scale > 0.6 then
            UI_STATE.scale = UI_STATE.scale - 0.1
            cleanupOldUI()
            UI_STATE.activeMenu = currentActiveMenu
            createMainUI()
            showNotification("UI缩放调整", "当前缩放比例：" .. string.format("%.1f", UI_STATE.scale) .. "x（缩小）")
        else
            showNotification("缩放限制", "已达到最小缩放比例（0.6x）", 2)
            UI_STATE.isScaling = false
        end
    end)
    
    -- 放大按钮
    createControlButton("+", 45 * UI_STATE.scale, Color3.fromRGB(60, 120, 60), function()
        if UI_STATE.isScaling then return end
        UI_STATE.isScaling = true
        
        local currentActiveMenu = UI_STATE.activeMenu
        if UI_STATE.scale < 1.0 then
            UI_STATE.scale = UI_STATE.scale + 0.1
            cleanupOldUI()
            UI_STATE.activeMenu = currentActiveMenu
            createMainUI()
            showNotification("UI缩放调整", "当前缩放比例：" .. string.format("%.1f", UI_STATE.scale) .. "x（放大）")
        else
            showNotification("缩放限制", "已达到最大缩放比例（1.0x）", 2)
            UI_STATE.isScaling = false
        end
    end)
    
    -- 关闭按钮
    createControlButton("X", 0, Color3.fromRGB(210, 60, 60), function()
        cleanupOldUI()
        UI_STATE.isRunning = false
        showNotification("脚本已关闭", "TXR脚本已退出运行", 3)
    end)
    
    -- 绑定拖动事件
    bindDragToElement(topBar, mainPanel)
    bindDragToElement(mainPanel, mainPanel)
    
    UserInputService.InputChanged:Connect(function(input)
        if UI_STATE.isDragging and not UI_STATE.isScrolling and 
           (input.UserInputType == Enum.UserInputType.MouseMovement or 
            input.UserInputType == Enum.UserInputType.Touch) and
           mainPanel:IsDescendantOf(game) then
            local delta = input.Position - UI_STATE.dragStart
            mainPanel.Position = UDim2.new(
                UI_STATE.panelStartPos.X.Scale, UI_STATE.panelStartPos.X.Offset + delta.X,
                UI_STATE.panelStartPos.Y.Scale, UI_STATE.panelStartPos.Y.Offset + delta.Y
            )
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if (input.UserInputType == Enum.UserInputType.MouseButton1 or 
            input.UserInputType == Enum.UserInputType.Touch) and UI_STATE.isDragging then
            UI_STATE.isDragging = false
        end
    end)
    
    createFloatingButton()
    UI_STATE.isScaling = false
    print("主UI创建成功")
end

-- ====================== 脚本初始化 ======================
local function initScript()
    local localPlayer = Players.LocalPlayer
    if not localPlayer then
        localPlayer = Players:GetPropertyChangedSignal("LocalPlayer"):Wait()
        if not localPlayer then
            warn("无法获取本地玩家")
            return
        end
    end
    
    initCSVPath()
    
    -- 初始化角色监听
    if UI_STATE.characterAddedConn then
        UI_STATE.characterAddedConn:Disconnect()
    end
    if UI_STATE.characterRemovingConn then
        UI_STATE.characterRemovingConn:Disconnect()
    end
    
    -- 监听角色添加
    UI_STATE.characterAddedConn = localPlayer.CharacterAdded:Connect(onCharacterAdded)
    -- 监听角色移除
    UI_STATE.characterRemovingConn = localPlayer.CharacterRemoving:Connect(onCharacterRemoving)
    
    -- 如果已有角色，立即初始化
    if localPlayer.Character then
        task.spawn(onCharacterAdded, localPlayer.Character)
    end
    
    UI_STATE.savedCoordinates = readCSVFile()
    
    local success, err = pcall(createMainUI)
    if not success then
        local fullError = debug.traceback(err)
        warn("创建UI失败：\n" .. fullError)
        showNotification("UI加载失败", "错误：" .. tostring(err):sub(1, 100), 10)
    else
        showNotification("UI 2.0加载成功", "尊贵的用户欢迎使用TXR脚本", 3)
        print("初始化完成")
    end
end

-- ====================== 脚本启动 ======================
local success, errorMsg = pcall(initScript)
if not success then
    local fullError = debug.traceback(errorMsg)
    warn("脚本启动失败：\n" .. fullError)
    
    pcall(function()
        local player = Players.LocalPlayer
        if player and player:FindFirstChild("PlayerGui") then
            local gui = Instance.new("ScreenGui")
            gui.Parent = player.PlayerGui
            
            pcall(function()
                if syn and syn.protect_gui then
                    syn.protect_gui(gui)
                end
            end)
            
            createUILabel(gui, {
                name = "ErrorLabel",
                size = UDim2.new(1, 0, 1, 0),
                text = "脚本启动失败：\n" .. tostring(errorMsg):sub(1, 200),
                color = Color3.new(1, 0, 0),
                textSize = 14,
                textWrapped = true,
                xAlign = Enum.TextXAlignment.Left
            })
        end
    end)
end